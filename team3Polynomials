package team3Polynomials;
import java.util.Scanner;
public class team3Polynomials {
	public static Linked_List<String> list = new Linked_List<>();
	public static Linked_List<String> list2 = new Linked_List<>();
	public static Linked_List<String> combinedList = new Linked_List<>();
	public static Linked_List<String> combinedSortedList = new Linked_List<>();

	public static void main(String[] args) {




		System.out.println();

		String option = "e";
		System.out.println("WELCOME TO POLYNOMIAL ADDITION CALCULATOR");
		System.out.println();
		
		Scanner console = new Scanner(System.in);
		
		String poly1 = "";
		String poly2 = "";
		
		while (option.charAt(0) != 'q') {
			System.out.println("MENU");
			System.out.println("f - Enter first polynomial");
	        System.out.println("s - Enter second polynomial");
	        System.out.println("a - Add polynomials");
	        System.out.println("r - Show results");
	        System.out.println("q - Quit");
	        System.out.println("");
	        System.out.println("Choose an option: ");
			option = console.next();
			
			if (option.charAt(0) == 'f') {
				System.out.println("Enter first polynomial: ");
				poly1 = console.next();
				convertString(poly1, list);
			}
			if (option.charAt(0) == 's') {
				System.out.println("Enter second polynomial: ");
				poly2 = console.next();
				convertString(poly2, list2);
			}

			if (option.charAt(0) == 'a') {
				System.out.println("Adding polynomials");
				addPolys();
			}
			if (option.charAt(0) == 'r') {
				System.out.println("added polys here");
				Iterator<String> it = list.iterator();
				while (it.hasNext()) {
					System.out.println(it.next().toString());
				}
				System.out.println();
				Iterator<String> it2 = list2.iterator();
				while (it2.hasNext()) {
					System.out.println(it2.next().toString());
				}
				System.out.println();
				Iterator<String> it3 = combinedList.iterator();
				while (it3.hasNext()) {
					System.out.println(it3.next().toString());
				}
				System.out.println();
				sortPolys(combinedList);
				
				Iterator<String> itS = combinedSortedList.iterator();
				while (itS.hasNext()) {
					System.out.println(itS.next().toString());
				}
			}
			System.out.println();
		}//end while loop
		
		System.out.println("Have a nice day, PROGRAM TERMINATED");
	}//end main
	
	public static void convertString(String poly, Linked_List<String> list) {
		 
     	
     	
     	boolean minus = true;
			String exponent = "";
			String coefficient = "";
			for (int i = 0; i < poly.length(); i++) {
				/*while iterating through the string, if + or - is found before an x is found, then the term must be
				just a number */
				if (i > 0 && !(coefficient == "") && (poly.charAt(i) == '+' || poly.charAt(i) == '-')) {
					if (coefficient.equals("-")) { coefficient = "-1"; }
					if (coefficient.equals("+") || coefficient.equals("")) { coefficient = "1"; }
					exponent = "5000";
					System.out.println(Integer.parseInt(coefficient));
					list.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
					combinedList.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
					System.out.println("5000");
					coefficient = "";
				}
				//if the current character is not x, it is part of the coefficient
				if (!(poly.charAt(i) == 'x')) { coefficient += poly.charAt(i); }
				
				/*if the current character is not x and is also the end of the string, then the term must be
				just a number */
				if (!(poly.charAt(i) == 'x') && i+1 == poly.length()) { 
					if (coefficient.equals("-")) { coefficient = "-1"; }
					if (coefficient.equals("+") || coefficient.equals("")) { coefficient = "1"; }
					exponent = "5000";
					System.out.println(Integer.parseInt(coefficient));
					list.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
					combinedList.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
					System.out.println("5000");
					coefficient = "";
				}
				
				//if the current character is x, then we must find the exponent that lies after it
				if (poly.charAt(i) == 'x') {
					//if the current character is the end of the string, then the exponent of x is 1
					if (i + 1 == poly.length()) {
						exponent = "1";
						if (coefficient.equals("-")) { coefficient = "-1"; }
						if (coefficient.equals("+") || coefficient.equals("")) { coefficient = "1"; }
						if (exponent.equals("0")) {
							coefficient = "1";
							exponent = "5000";
						}
						if (!(coefficient.equals("0"))) { 
							System.out.println(Integer.parseInt(coefficient));
							System.out.println(exponent);
							list.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
							combinedList.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
						}
						coefficient = "";
						exponent = "";
					}
					/*if the current character is not the end of the string, and a '^' follows it, then an exponent
					 * lies after the '^' */
					else if (i < poly.length()-1 && poly.charAt(i+1) == '^') {
						/* if character after '^' is '-', then set a boolean minus to true, skip the '-' for now, and add
						 '-' to the exponent at the end */
						if (poly.charAt(i+2) == '-') { minus = true; }
						else { minus = false; }	
						if (minus) { i = i + 3;  }
						else { i = i + 2; }
						//while loop that finds the exponent by adding characters to the right of ^ until a +, -, or end of string is found
						while ((i < poly.length()) && !(poly.charAt(i) == '+') && !(poly.charAt(i) == '-')) {
							exponent += poly.charAt(i++);
						}
						i--;
						if (minus) { exponent = "-" + exponent; }
						/* Special cases here,
						 * if coefficient is only '-', it is -1
						 * if coefficient is either only '+' or nothing, it is 1
						 * if the exponent is 0, the term is just 1
						 * if the coefficient is 0, ignore term */
						if (coefficient.equals("-")) { coefficient = "-1"; }
						if (coefficient.equals("+") || coefficient.equals("")) { coefficient = "1"; }
						if (exponent.equals("0")) {
							coefficient = "1";
							exponent = "5000";
						}
						if (!(coefficient.equals("0"))) { 
							System.out.println(Integer.parseInt(coefficient));
							System.out.println(exponent);
							list.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
							combinedList.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
						}
						//reset values before finding the next term
						coefficient = "";
						exponent = "";
					}
					else {
						//if the character x is the end of the string, then the exponent is 1
						exponent = "1";
						if (coefficient.equals("-")) { coefficient = "-1"; }
						if (coefficient.equals("+") || coefficient.equals("")) { coefficient = "1"; }
						if (exponent.equals("0")) {
							coefficient = "1";
							exponent = "5000";
						}
						if (!(coefficient.equals("0"))) { 
							System.out.println(Integer.parseInt(coefficient));
							System.out.println(exponent);
							list.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
							combinedList.addLast(Integer.parseInt(coefficient) + "@" + Integer.parseInt(exponent));
						}
						coefficient = "";
						exponent = "";
					}
					
				}
			}//end loop through string




     }//end convertString() 


	public static void sortPolys(Linked_List<String> toSortList) {

		 combinedSortedList = toSortList.callCompare();
		
		

		
		
		
		
		
		

	}//end sortPolys() method


	public static void addPolys() {

	}//end addPolys() method
	
}//end class
